:PROPERTIES:
:ID:       1459C115-A9FC-4D4B-82DD-44C58AB54987
:END:
#+SETUPFILE:./hugo_setup.org
#+HUGO_SLUG: bfp
#+TITLE: Gregg - BFP Performance Tools

Tags: [[id:0C832BAD-E9A5-4B04-8A2A-851647119A10][computers]], [[id:B296A87C-D41F-4992-9F1E-ABF6896B69DB][books]], [[id:0B24ACE2-DACC-4086-8207-1F66C255C01F][bpf]]

* Chapter 1 - Intro
- Turned into a general purpose execution engine in 2014
- VM
** Tracing, Snooping, Sampling, Profiling, and Observability
   - Tracing: event based recording
     - Tracing and snooping are the same thing
     - ~strace~, ~tcp-dump~, etc
   - Sampling: tools that take subsets of a measurements to paint a coarse picture
     - Only rough picture
   - Observability: understanding a system through observation
     - Includes tracing tools, sampling tools, and fixed counters
     - Does not include benchmark tools
** BCC/BFPTrace/IO Visor
*** BCC: BFP Compiler Collection
    - First high levle tracing framework developed for BPF
      - Provides C, with interfaces for Python, lua, and C++
      - Much more complex than bfptrace
      - Meant for complex tools
*** bfptrace
    - Newer frontend, special purpose high level programming langauge
    - meant for one line scripts
*** IO Visor
    - Linux foundation project on GH
    - Encompases both bcc and bpftrace
** BCC
*** ~execsnoop(8)~
    - Traces ~execve(2)~ system call
    - Output reveals which processes were executed while tracing
    - this prints out per-event data, but other tools allow for summaries
*** ~biolatency(8)~
    - Traces block io latency
    - Displays an ASCII histogram of sizes


** Visability
   - BPF tracing gives you visibility across the full software stack
   - Supports:
     - Applications tracing with runtimes
     - Application tracing with compiled code
     - ~/lib/*~ information
       - same as ~ltrace~
     - [[id:E7892B51-5D1C-4F65-9221-7B88A915827D][syscalls]] interface
       - same as ~strace~ or ~perf~
       - [[id:23A8ABE3-EBAF-4E73-9896-691178B03933][kernel]] scheduler, file systems, TCP/IP, etc
         - same as ~ftrace~ or ~perf~
     - [[id:572EA03C-52DA-4BC3-BFD5-BB73EB49042C][hardware]] tracing
       - ~perf~, ~sar~, ~/proc~ counters

** Dynamic instrumentation: kprobes and uprobes
   - Dynamic instrumentation allows for probing of live running software
   - Examples:
     | Probe                        | Description                              |
     |------------------------------+------------------------------------------|
     | kprobe:vfs_read              | Beginning of vfs_read()                  |
     | kretprobe:vfs_read           | End of vfs_read()                        |
     | uprobe:/bin/bash:readline    | Beginning of readline() function in bash |
     | uretprobe:/bin/bash:readline | End of readline() function in bas        |

** Static instrumentation: tracepoints and usdt
   - Function names change and dynamic instrumentation may not always be correct
   - Can use tracepoints or user statically defined tracing:
     | Probe                                    | Description                |
     |------------------------------------------+----------------------------|
     | tracepoint:syscalls:sys_enter_open       | instrument open(2) syscall |
     | usdt:/usr/sbin/mysqld:mysql:query__start | query__start probe         |

** ~bpftrace~
   - takes ~-e~ for execute
   - ~-l~ for listing open tracepoints
